
from ConfigParser import ConfigParser

configfile: './config/config.yaml'

parser = ConfigParser(config)
final_files = parser.file_names


# Ensures dataset and method are names not file paths, and ids are ints
wildcard_constraints:
    dataset="[^\/]+",
    method="[^\/]+",
    data_id="\d+",
    selection_id="\d+"


rule all:
    input:
        expand("{results_dir}/{files}", results_dir=config['RESULTS_DIR'], files=final_files)
        

rule process_data:
    conda:
        "envs/base_env.yaml"
    input:
        expand("{raw_data_dir}/{{dataset}}.h5ad", raw_data_dir=config['DATA_DIR'])
    output:
        temp(expand("{data_dir}/{{dataset}}_{{data_id}}.h5ad", data_dir=config['DATA_DIR_TMP']))
    params:
        data_params_file = parser.data_params_file
    shell:
        "python workflow/scripts/process_data.py --data {input} -o {output} -id {wildcards.data_id} -f {params.data_params_file}"


rule selection:
    input:
        expand("{data_dir}/{{dataset}}_{{data_id}}.h5ad", data_dir=config['DATA_DIR_TMP'])
    output:
        expand("{results_dir}/selection/{{method}}_{{selection_id}}_{{dataset}}_{{data_id}}.csv", results_dir=config['RESULTS_DIR'])
    log:
        "logs/selections/{method}_{selection_id}_{dataset}_{data_id}.csv"
    params:
        selection_params_file = parser.selection_params_file
    shell:
        "python workflow/scripts/selection_{wildcards.method}.py --data {input} -o {output} -id {wildcards.selection_id} -f {params.selection_params_file}"
